#version 410 core

// Output
layout (location = 0) out vec4 color;

// Matrices we'll need
layout (std140) uniform constants
{
    mat4 mv_matrix;		
	mat4 model_matrix;												
	mat4 view_matrix;	
	mat4 proj_matrix;
	vec4 uni_color;		
	vec4 light_pos;									     		
	vec4 useUniformColor;	
	vec4 invertNormals;
	vec4 colorPercent;
};

// Input from vertex shader
in VS_OUT
{
    vec3 N;
    vec3 L;
    vec3 V;
	vec3 color;
	vec2 tc;
} fs_in;

// Material properties
uniform vec3 diffuse_albedo = vec3(0.2, 0.2, 0.2);
uniform vec3 specular_albedo = vec3(0.7);
uniform float specular_power = 128.0;
uniform vec3 ambient = vec3(0.2, 0.2, 0.2);

uniform sampler2D colorTexture;
uniform sampler2D normalTexture;

void main(void)
{
    // Normalize the incoming N, L and V vectors

    vec3 bumpNormal = normalize(mat3(mv_matrix) * texture2D(normalTexture, fs_in.tc).xyz);
	//bumpNormal = (bumpNormal-0.5) * 2.0; //changes the scale to -1, 1
	vec3 vertexNormal = normalize(fs_in.N);

	vec3 N = vec3(0,0,0);

	float absX = abs(vertexNormal.x);
	float absY = abs(vertexNormal.y);
	float absZ = abs(vertexNormal.z);

	bool xIsLargest = (absX > absY) && (absX > absZ);
	bool yIsLargest = (absY > absX) && (absY > absZ);
	bool zIsLargest = (absZ > absX) && (absZ > absY);

	float bumpX = bumpNormal.x;
	float bumpY = bumpNormal.y;
	float bumpZ = bumpNormal.z;

	if (xIsLargest)
	{
		if (vertexNormal.x > 0)
		{
			N = vec3( bumpZ, bumpY, bumpX);
		}
		else
		{
			N = vec3(-bumpZ, bumpY, bumpX);
		}
		
	}
	else if (yIsLargest)
	{
		if (vertexNormal.y > 0)
		{
			N = vec3(bumpX,  bumpZ, bumpY);
		}
		else
		{
			N = vec3(bumpX, -bumpZ, bumpY);
		}
	}
	else if (zIsLargest)
	{
		if (vertexNormal.z > 0)
		{
			N = vec3(bumpX, bumpY,  bumpZ);
		}
		else
		{
			N = vec3(bumpX, bumpY, -bumpZ);
		}
	}

    vec3 L = normalize(fs_in.L);
    vec3 V = normalize(fs_in.V);

    // Calculate R locally
    vec3 R = reflect(-L, N);

    // Compute the diffuse and specular components for each fragment
    vec3 diffuse = max(dot(N, L), 0.0) * diffuse_albedo;
    vec3 specular = pow(max(dot(R, V), 0.0), specular_power) * specular_albedo;

    // Write final color to the framebuffer

	//color =  vec4( (ambient + diffuse + specular) * texture(normalTexture, fs_in.tc).xyz, 1.0);

	color = vec4( (ambient + diffuse + specular) * texture2D(colorTexture, fs_in.tc).xyz, 1.0); //The one I want

	//color = vec4( float(xIsLargest), float(yIsLargest), float(zIsLargest), 1.0);

	//color = vec4(N, 1.0);

	//color = vec4(vertexNormal, 1.0);
}
